#!/usr/bin/env python3
"""
Migrate data from MCP Server database to MCP Jive database.
"""

import asyncio
import sys
import os
import uuid
from datetime import datetime

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from mcp_jive.lancedb_manager import LanceDBManager as JiveLanceDBManager, DatabaseConfig as JiveConfig
from mcp_server.lancedb_manager import LanceDBManager as ServerLanceDBManager, DatabaseConfig as ServerConfig

async def migrate_data():
    """Migrate data from MCP Server to MCP Jive database."""
    
    print("=== Starting Data Migration ===")
    print()
    
    # Initialize both databases
    print("1. Initializing databases...")
    
    # Source: MCP Server
    server_config = ServerConfig(data_path='./data/lancedb')
    server_manager = ServerLanceDBManager(server_config)
    await server_manager.initialize()
    
    # Target: MCP Jive
    jive_config = JiveConfig(data_path='./data/lancedb_jive')
    jive_manager = JiveLanceDBManager(jive_config)
    await jive_manager.initialize()
    
    print("   ✓ Both databases initialized")
    
    # Migrate Task data to WorkItem
    print("\n2. Migrating Task data to WorkItem...")
    
    try:
        # Get Task table from server
        server_task_table = server_manager.get_table('Task')
        task_count = server_task_table.count_rows()
        
        if task_count > 0:
            print(f"   Found {task_count} tasks to migrate")
            
            # Get all tasks
            tasks_df = server_task_table.search().limit(task_count).to_pandas()
            
            migrated_count = 0
            for _, task in tasks_df.iterrows():
                try:
                    # Convert Task to WorkItem format
                    # Note: vector will be auto-generated by create_work_item
                    work_item_data = {
                        'id': str(uuid.uuid4()),  # New UUID for work item
                        'item_id': task['id'],     # Original task ID as item_id
                        'title': task['title'],
                        'description': task['description'],
                        # 'vector' excluded - will be auto-generated
                        'item_type': 'task',       # Default to task type
                        'status': task['status'],
                        'priority': task['priority'],
                        'assignee': None,          # Not in original Task schema
                        'tags': task['tags'],
                        'estimated_hours': 0,      # Default value
                        'actual_hours': 0,         # Default value
                        'progress': 0,             # Default value
                        'parent_id': None,         # Not in original Task schema
                        'dependencies': [],        # Default empty
                        'acceptance_criteria': None, # Default None (string field)
                        'created_at': task['created_at'],
                        'updated_at': task['updated_at'],
                        'metadata': task['metadata']
                    }
                    
                    # Create work item in Jive database
                    await jive_manager.create_work_item(work_item_data)
                    
                    migrated_count += 1
                    print(f"   ✓ Migrated task: {task['title']}")
                    
                except Exception as e:
                    print(f"   ✗ Failed to migrate task {task['title']}: {e}")
            
            print(f"   ✓ Successfully migrated {migrated_count}/{task_count} tasks")
        else:
            print("   No tasks found to migrate")
            
    except Exception as e:
        print(f"   ✗ Error during task migration: {e}")
    
    # Check other tables for data
    print("\n3. Checking other tables...")
    
    server_tables = server_manager.list_tables()
    for table_name in ['ExecutionLog', 'SearchIndex', 'WorkItemDependency']:
        if table_name in server_tables:
            table = server_manager.get_table(table_name)
            count = table.count_rows()
            if count > 0:
                print(f"   ⚠️  {table_name} has {count} records - manual review needed")
            else:
                print(f"   ✓ {table_name} is empty")
    
    # Cleanup
    await server_manager.cleanup()
    await jive_manager.cleanup()
    
    print("\n=== Migration Complete ===")
    print("Next steps:")
    print("1. Verify migrated data in MCP Jive database")
    print("2. Update code to use only MCP Jive components")
    print("3. Remove MCP Server database and code")

if __name__ == "__main__":
    asyncio.run(migrate_data())